= PGroonga 2.3.4\n 新機能紹介

 : subtitle
    WALの自動適用と\nクラッシュセーフ機能
 : author
    堀本 泰弘
 : institution
    株式会社クリアコード
# : content-source
#    イベント名
 : date
    2021-12-24
 : allotted-time
    30m
 : start-time
    2021-12-24T16:05:00+09:00
 : end-time
    2021-12-24T16:35:00+09:00
 : theme
    .

= PGroonga 2.3.4 の新機能

下記の機能が新規追加

  * PGroongaのWALの自動適用
  * クラッシュセーフ

= PGroongaのWALの自動適用

* 該当する環境

  * ストリーミングレプリケーション構成
  * pgroonga.enable_wal が有効

= いままでの動作

いままでは以下の操作が必要だった

* 定期的にPGroongaのWALを適用
* PGroongaのWALを適用後に削除

= いままでの動作

  # image
  # src = images/WAL-increase.png
  # relative_height = 90

= 2.3.4 以降の動作

PGroonga 2.3.4 以降

* 定期的にPGroongaのWALを自動適用
* PGroongaのWALの最大サイズを制限

= PGroongaのWALの自動適用

* 定期的に pgroonga_wal_apply 関数 を使って、PGroongaのWALを適用する

= PGroongaのWALの自動適用\n設定

以下のパラメータを((*スタンバイサーバー*))に設定する

  # coderay sql

    shared_preload_libraries = 'pgroonga_wal_applier'

= PGroongaのWALの自動適用

* pgroonga_wal_applier

  * PGroongaのWALを定期的に適用する

= PGroongaのWALの自動適用

  # image
  # src = images/WAL-auto-apply.png
  # relative_height = 80

= PGroongaのWALの自動適用\n適用間隔の変更

以下のパラメータを変更\n
((*スタンバイサーバー*))に設定

  # coderay sql

    # デフォルトの単位は秒
    # 10秒に変更する場合
    pgroonga_wal_applier.naptime = 10

    # 10分に変更する場合
    pgroonga_wal_applier.naptime = 10m

= PGroongaのWALの自動適用\n注意点

* 注意

  * 適用間隔を短くしすぎるとCPUリソースを多く使う
  * 適用後もPGroongaのWALは((*削除されない*))

= PGroongaのWALの\n最大サイズ制限

* PGroongaのWALは削除されないが((*最大サイズを制限できる*))

= PGroongaのWALの\n最大サイズ制限の設定

以下のパラメータを((*プライマリーサーバー*))に設定

  # coderay sql

    # デフォルトの単位はKiB
    # 512KiBに変更する場合
    pgroonga.max_wal_size = 512

    # 10MiBに変更する場合
    pgroonga.max_wal_size = 10MB

= PGroongaのWALの\n最大サイズ制限

* 0を設定するとサイズ制限なし
* デフォルトは0でサイズ制限なし
* 最大サイズを超えた場合は、PGroongaのWALの先頭から上書きしていく

= PGroongaのWALの\n最大サイズ制限

  # image
  # src = images/WAL-max-size.png
  # relative_height = 100

= PGroongaのWALの\n最大サイズ制限 注意点

* 注意

  * 最大サイズを超える前にWALが適用されていないと、WALが破損する
  * 設定したWALの適用間隔で蓄積されるWALサイズより十分に大きい数字を pgroonga.max_wal_size に指定する

= クラッシュセーフ機能

* クラッシュ時にPGroongaのインデックスを((*自動*))で復旧

= いままでの動作

* PostgreSQLがクラッシュした時

  * PGroongaのインデックスを((*手動(REINDEX)*))で復旧

= クラッシュセーフ機能\n設定

以下のパラメータを((*プライマリーサーバー*))に設定する

  # coderay sql

    shared_preload_libraries = 'pgroonga_crash_safer'
    pgroonga.enable_crash_safe = on

= クラッシュセーフ機能

* pgroonga_crash_safer

  * PGroonga内部で使っているGroongaのDBをGroongaのWALを使って復旧
  * PGroonga内部で使っているGroongaのDBをREINDEXを使って復旧

= クラッシュセーフ機能

* データベースごとに必ず一つPostgreSQLのワーカープロセスを使う
* インデックス更新後、即時、GroongaのWALに変更を書く\n
  (PGroongaのWALとGroongaのWALは((*別物*))であることに注意)

= クラッシュセーフ機能

  # image
  # src = images/crash-safe-WAL-apply.png
  # relative_height = 90

= クラッシュセーフ機能

  # image
  # src = images/crash-safe-WAL-apply-shutdown.png
  # relative_height = 90

= クラッシュセーフ機能\n自動復旧のトリガー

* PostgreSQL起動時は、通常、GroongaのWALは存在しない

  * シャットダウン時に削除されるため

= クラッシュセーフ機能\n自動復旧のトリガー

* PostgreSQL起動時にGroongaのWALが残っていたら正しくシャットダウンできていないと判断
  * 最初にPGroongaの機能が使われたタイミングでGroongaのデータベースを自動で復旧

= クラッシュセーフ機能\n自動復旧の手順

  # image
  # src = images/restore-from-WAL.png
  # relative_height = 100

= クラッシュセーフ機能\n自動復旧の手順

  # image
  # src = images/rebuild-db.png
  # relative_height = 100

= クラッシュセーフ機能\nGroongaのWALのフラッシュ間隔

以下のパラメータを変更

  # coderay sql

    # デフォルトの単位は秒
    # 10秒に変更する場合
    pgroonga_crash_safer.flush_naptime = 10

    # 10分に変更する場合
    pgroonga_crash_safer.flush_naptime = 10min

= クラッシュセーフ機能 注意点

* max_worker_processes を増やす必要があるかもしれない

  * 必ず一つワーカープロセスを使う
  * PGroongaを使っているDB毎に1つまたは、2つのワーカープロセスを使う
  * PGroongaを使っているDBが3つあった場合は、最大で 2 * 3 + 1 = 7 のワーカープロセスが必要

= クラッシュセーフ機能\n注意点

* パフォーマンスが劣化する(書き込み性能が落ちる)
  * インデックスを更新するたびGroongaのWALを書き出すため
